/// @title Pod
/// @notice SPDX-License-Identifier: MIT
/// @author regohiro

#define macro CONSTRUCTOR() = takes(0) returns(0) {
    // Store approve selector for call at 0x00
    0x095ea7b3                  // [approve(address,uint256)] 
    0x00 mstore                 // []

    // Store caller (= vault) as first arg at 0x20
    caller                      // [caller]
    0x20 mstore                 // []

    // Store type(uint256).max at second arg at 0x40
    0x00 not                   // [type(uint256).max]
    0x40 mstore                // []

    // Copy and store token address into memory at 0x60
    0x20                        // [size] - byte size to copy
    dup1 codesize sub           // [offset, size] - offset in the code to copy from
    0x60                        // [mem, offset, size] - offset in memory to copy to
    codecopy                    // []

    // Call ERC20(token).approve(caller, type(uint256).max)
    0x20                        // [retSize] 
    0x00                        // [retOffset, retSize]
    0x60                        // [argSize, retOffset, retSize]
    0x1C                        // [argOffset, argSize, retOffset, retSize]
    dup3                        // [value, argOffset, argSize, retOffset, retSize]
    0x60 mload                  // [tokenAddr, value, argOffset, argSize, retOffset, retSize]
    gas                         // [gas, tokenAddr, value, argOffset, argSize, retOffset, retSize]
    call                        // [success]

    // Revert if not successful
    cont jumpi
    0x00 dup1 revert
    cont:
}

#define macro MAIN() = {}